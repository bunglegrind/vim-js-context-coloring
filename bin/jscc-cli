//#!/usr/bin/env node
/*jshint node:true, strict:false*/

var jsx = false;
var block_scope = false;
var block_scope_with_let = false;
var highlight_function_names = false;

//handle //CLI args (just flags, no values)
// --jsx : support JSX syntax
// --block-scope : highlight block scope (if es6 is on)
// --block-scope-with-let : highlight block scope only if it contains let variables
// --highlight-function-names : highlight names in function declarations

if (process.argv.length > 2) {
    if (process.argv.indexOf("--jsx") !== -1) {
        jsx = true;
    }
    if (process.argv.indexOf("--block-scope") !== -1) {
        block_scope = true;
    }
    if (process.argv.indexOf("--block-scope-with-let") !== -1) {
        block_scope_with_let = true;
    }
    if (process.argv.indexOf("--highlight-function-names") !== -1) {
        highlight_function_names = true;
    }
}

//parser depends on if jsx support is required
//acorn-jsx should work for es6 
//but escope seems to favor esprima in some cases
if (jsx) {
    var acorn = require('acorn-jsx');
} else {
    var espree = require('espree');
}

var escope = require('eslint-scope');

var input_js = '';
var scopes = [];

//collect input from stdin
process.stdin.resume();
process.stdin.setEncoding('utf8');

process.stdin.on('data', function(chunk) {
    input_js += chunk;
});

var import_re = /^\s*import\s/m;
var export_re = /^\s*export\s/m;

function isModule(js) {
    return import_re.test(js) || export_re.test(js);
}

process.stdin.on('end', function() {
    var ast;
    var sourceType = isModule(input_js) ? 'module' : 'script';
    if (jsx) {
        ast = acorn.parse(input_js, {
            ecmaVersion: 6,
            ranges: true,
            sourceType: sourceType,
            allowImportExportEverywhere: true,
            allowReturnOutsideFunction: true,
            plugins: { jsx: true }
        });

    } else {
        ast  = espree.parse(input_js, {
            ecmaVersion: 12,
            range: true,
            sourceType: sourceType,
            allowImportExportEverywhere: true,
            allowReturnOutsideFunction: true,
        });
    }

    var scopeManager = escope.analyze(ast, {
            optimistic: true,
            ignoreEval: true,
            ecmaVersion: 12,
            sourceType: sourceType,
    }); 

    var toplevel = scopeManager.acquire(ast);
    var enclosed = {};
    var declared_globals = [];
    var undeclared_globals = [];

    //define scope for toplevel
    toplevel.variables.forEach(function (variable) {
        declared_globals.push(variable.defs[0].name.name);
        enclosed[variable.defs[0].name.name] = 0;
    });

    toplevel.through.forEach(function (ref) {
        if (ref.identifier.name && !enclosed[ref.identifier.name]) {
            enclosed[ref.identifier.name] = -1;
            undeclared_globals.push(ref.identifier.name);
        }
    });
        scopes.push([0, toplevel.block.range[0], toplevel.block.range[1], enclosed]);
    function hasLet(scope) {
            var v,
            variable,
            vlen = scope.variables.length;

            for (v = 0; v < vlen; v++) {
                    variable = scope.variables[v];
                    if (variable.defs.length &&
                        variable.defs[0].type === "Variable" &&
                                variable.defs[0].parent.kind === 'let') {
                            return true;
                    }

            }
            return false;
    
    }

    function setLevel(scope, level) {

        var enclosed = {};

        scope.level = level;

        //level 0 references already done
        if (level) {

            //add function name to enclosed vars
            if (highlight_function_names &&
                scope.type === 'function' &&
                    scope.block.type === 'FunctionDeclaration') {
                enclosed[scope.block.id.name] = level - 1;
            }

            scope.through.forEach(function (ref) {
                if (ref.resolved) {
                    enclosed[ref.identifier.name] = ref.resolved.scope.level;
                } else {

                    if (declared_globals.indexOf(ref.identifier.name) !== -1) {
                        enclosed[ref.identifier.name] = 0;
                    }  else {
                        //undeclared global level is -1
                        enclosed[ref.identifier.name] = -1;
                    }
                    /*else if (undeclared_globals.indexOf(ref.identifier.name) !== -1) { 
                        enclosed[ref.identifier.name] = -1;
                    }*/
                }
            });           

            scopes.push([level, scope.block.range[0], scope.block.range[1], enclosed]);
        }
            
        //recurse into childScopes
        if (scope.childScopes.length) {
            scope.childScopes.forEach(function (s) {

                //only color function scopes unless use_block_scope is true
                if (block_scope || s.type === "function") {
                    setLevel(s, level + 1);
                } else if (block_scope_with_let && hasLet(s)) {
                    setLevel(s, level + 1);
                } else {
                    setLevel(s, level);
                }
            });
        }

    }


    setLevel(toplevel, 0)

    process.stdout.write(JSON.stringify({
            scopes: scopes
    }));
});
